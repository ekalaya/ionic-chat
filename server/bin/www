#!/usr/bin/env node

var debug = require("debug")("ionic-chat");
var app = require("../app");
var http = require("http");

var port = normalizePort(process.env.PORT || "54321");
app.set("port", port);

// Create HTTP server.
var server = http.createServer(app);

// setup socket.io, and socket-session
var socketIO = require("socket.io");
var io = socketIO(server);

// chat 监听事件
var chatEvt = require("../chatserver");
chatEvt(io);

// Listen on provided port, on all network interfaces.
server.listen(app.get("port"), function() {
  debug("Express server listening on port " + server.address().port);
});

// 状态处理
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
