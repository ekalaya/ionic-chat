/**
 * 指令集
 */
angular.module('chat.directive', [])
    .directive('videoView', function ($rootScope, $timeout) {
        return {
            restrict: 'E',
            template: '<div class="video-container"></div>',
            replace: true,
            link: function (scope, element, attrs) {
                function updatePosition() {
                    try {
                        cordova.plugins.phonertc.setVideoView({
                            container: element[0],
                            local: {
                                position: [10, 10],
                                size: [100, 100]
                            }
                        });
                    } catch (err) {
                        alert('direc' + err);
                    }
                }
                $timeout(updatePosition, 500);
                $rootScope.$on('videoView.updatePosition', updatePosition);
            }
        }
    })
    // 弹框背景
    .directive('rjCloseBackDrop', [function () {
        return {
            scope: false,
            restrict: 'A',
            replace: false,
            link: function (scope, iElm, iAttrs, controller) {
                var htmlEl = angular.element(document.querySelector('html'));
                htmlEl.on("click", function (event) {
                    if (event.target.nodeName === "HTML" &&
                        scope.popup.optionsPopup && scope.popup.isPopup) {
                        scope.popup.optionsPopup.close();
                        scope.popup.isPopup = false;
                    }
                });
            }
        };
    }])
    // 长按弹出框
    .directive('rjHoldActive', ['$ionicGesture', '$timeout', '$ionicBackdrop',
        function ($ionicGesture, $timeout, $ionicBackdrop) {
            return {
                scope: false,
                restrict: 'A',
                replace: false,
                link: function (scope, iElm, iAttrs, controller) {
                    $ionicGesture.on("hold", function () {
                        iElm.addClass('active');
                        $timeout(function () {
                            iElm.removeClass('active');
                        }, 300);
                    }, iElm);
                }
            };
        }
    ])
    // 进入时隐藏tab，退出时显示(用于聊天)
    .directive('hideTabsxietong', function ($rootScope) {
        return {
            restrict: 'A',
            link: function ($scope, $el) {
                $scope.$on("$ionicView.beforeEnter", function () {
                    $rootScope.hideTabsxietong = true;
                });
                $scope.$on("$ionicView.beforeLeave", function () {
                    $rootScope.hideTabsxietong = false;
                });
            }
        };
    })
angular.module('chat.directive')
    .directive('chatInput', function (PhotoAndImages, $timeout) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/chatinput/chatinput.tpl',
            replace: true,
            scope: {
                sendmessage: "=textMessage",

                onShowFace: "=onShowFace",
                onShowPhonebar: "=onShowPhonebar",
                onSendTextMessage: "&onSendTextMessage",
                onVoiceHold: "&onVoiceHold",
                onVoiceRelease: "&onVoiceRelease",

                // isVoiceMethod: "=isVoiceMethod",
                
                // isStartRecord: "=isStartRecord",
                // showPhonebar: "=showPhonebar",
            },
            link: function (scope, element, attrs, controller) {
                scope.isVoiceMethod = true;
                scope.isStartRecord = 0,
                //scope.sendmessage = '';

                scope.switchInputMethod = function (evtobj) {
                    if (scope.isVoiceMethod = !scope.isVoiceMethod, scope.isVoiceMethod) {
                        var i = 1;
                    } else {
                        var input = evtobj.currentTarget.parentNode.querySelector("textarea");
                        scope.isStartRecord = !1;
                        $timeout(function () {
                            // input.focus()
                        }, 500);
                    }
                }

                scope.onSendMessage = function () {
                    scope.onSendTextMessage()();
                    //scope.sendmessage = '';
                    $timeout(function () {
                        document.querySelector("#text_content").focus();
                    }, 0);
                }
                scope.onVoiceHold = function () { }
                scope.onVoiceRelease = function () { }

            }
        };
    });

angular.module('chat.directive')
    .directive('chatMessagePanel', function ($ionicModal, $timeout) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/chatmessagepanel/chatmessagepanel.tpl',
            replace: true,
            scope: {
                messageList: "=messageList",
            },
            link: function (scope, element, attrs, controller) {
                var mediaRec;
                scope.play = function (voiFile, type) {
                    if (mediaRec) {
                        mediaRec.stop();
                        mediaRec.release();
                    }
                    var target = angular.element(event.target).find("i");
                    if (type == "you") {
                        target.addClass("web_wechat_voice_gray_playing");
                    } else {
                        target.addClass("web_wechat_voice_playing");
                    }
                    if (isIOS) {
                        voiFile = voiFile.replace('file://', '');
                    }
                    mediaRec = new Media(voiFile,
                        // 成功操作
                        function () {
                            if (type == "you") {
                                target.removeClass("web_wechat_voice_gray_playing");
                            } else {
                                target.removeClass("web_wechat_voice_playing");
                            }
                            console.log("play():Audio Success");
                        },
                        // 失败操作
                        function (err) {
                            if (type == "you") {
                                target.removeClass("web_wechat_voice_gray_playing");
                            } else {
                                target.removeClass("web_wechat_voice_playing");
                            }
                            console.log("play():Audio Error: " + err.code);
                        }
                    );
                    //开始播放录音
                    mediaRec.play();
                    return false;
                };

                $ionicModal.fromTemplateUrl('dev/static/tab_chat/tpl/message/BigImage.html', {
                    scope: scope,
                    animation: 'slide-in-up'
                }).then(function (modal) {
                    scope.modal = modal;
                });
                scope.openImage = function (data) {
                    scope.imageData = data;
                    scope.modal.show();
                };
                scope.closeModal = function () {
                    scope.modal.hide();
                };
                scope.openImage = function (data) {
                    scope.imageData = data;
                    scope.modal.show();
                };
                // 构建消息UI模板
                scope.buildUrl = function (type) {
                    var tmpName;
                    switch (type) {
                        case 'RC:TxtMsg':
                            tmpName = 'txt';
                            break;
                        case 'RC:ImgMsg':
                            tmpName = 'img';
                            break;
                        case 'RC:DizNtf':
                            tmpName = 'diz';
                            break;
                        case 'RC:LBSMsg':
                            tmpName = 'lbs';
                            break;
                        case 'RC:ImgTextMsg':
                            tmpName = 'imgtext';
                            break;
                        case 'RC:VcMsg':
                            tmpName = 'vc';
                            break;
                        default:

                    }
                    return 'dev/static/tab_chat/tpl/message/' + tmpName + '.html';
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('chatToolBar', function(PhotoAndImages) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/chattoolbar/chattoolbar.tpl',
            replace: true,
            scope: {
                sendPhoto: "&sendPhoto",
                conversationType:"=conversationType"
            },
            link: function(scope, element, attrs, controller) {
                scope.takePic = function(way) {
                    var options;
                    // 从相册中选择
                    if (way) {
                        options = {
                            quality: 80,
                            targetWidth: 320,
                            targetHeight: 320,
                            saveToPhotoAlbum: false,
                            sourceType: Camera.PictureSourceType.PHOTOLIBRARY,
                            destinationType: Camera.DestinationType.FILE_URI
                        };
                        PhotoAndImages.getImages(options).then(function(data) {
                            scope.sendPhoto()(data);
                        });
                    } else {
                        // 拍照获取
                        options = {
                            quality: 80,
                            targetWidth: 320,
                            targetHeight: 320,
                            saveToPhotoAlbum: false,
                            sourceType: Camera.PictureSourceType.Camera,
                            destinationType: Camera.DestinationType.FILE_URI
                        };
                        PhotoAndImages.getPhoto(options).then(function(data) {
                            scope.sendPhoto()(data);
                        });
                    }
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('messageList', function ($ionicPopup) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/messagelist/messagelist.tpl',
            replace: true,
            scope: {
                friendsMessage: "=friendinviteList",
                gotoChatDetils2: "&responseReq",
                markMessage2: "&markMessage2",
                deleteMessage2: "&deleteMessage2",
            },
            link: function (scope, element, attrs, controller) {
                scope.popup = {
                    isPopup: false,
                    index: 0
                };
                // 弹出框
                scope.popupMessageOpthins = function (message) {
                    scope.popup.index = scope.friendsMessage.indexOf(message);
                    scope.popup.optionsPopup = $ionicPopup.show({
                        templateUrl: "dev/static/tab_chat/directives/messagelist/popup.html",
                        scope: scope,
                    });
                    scope.popup.isPopup = true;
                };
                // 设为已读
                scope.markMessage_local = function () {
                    var index = scope.popup.index;
                    scope.popup.optionsPopup.close();
                    scope.popup.isPopup = false;
                    scope.markMessage2()(index);
                };
                // 删除消息
                scope.deleteMessage_local = function () {
                    var index = scope.popup.index;
                    scope.popup.optionsPopup.close();
                    scope.popup.isPopup = false;
                    scope.deleteMessage2()(index);
                };

                scope.gotoChatDetils_local = function (friend, $index) {
                    scope.gotoChatDetils2()(friend, $index);
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('phoneContact', function ($state, $ionicLoading, $ionicScrollDelegate, $timeout,Friends) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/phonecontact/phonecontact.tpl',
            replace: true,
            scope: {
                friendsList_local: "=friendsList",
                groupsList_local:"=groupsList",
            },
            link: function (scope, element, attrs, controller) {
                scope.initTalk = function (friendID, username, type, $event) {
                    $state.go('tab.chatDetail', {
                        messageId: '1', name: username, targetId: friendID,
                        conversationType: type
                    });
                    $event.stopPropagation();
                    $event.preventDefault();
                }
                /**
                 * 待重构
                 */
                // 联系人右边导航栏
                scope.cri = { DataValue: '' };
                scope.alphabet = ['↑', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                    'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
                scope.gotoList = function (letter) {
                    var showBox = $ionicLoading.show({ template: letter });
                    $timeout(function () {
                        $ionicLoading.hide();
                    }, 550);
                    if (letter == '↑')
                        letter = "top";
                    // 导航至对应字幕开头的[这里改做一个操作，匹配最近的！]
                    var index_alpha = document.querySelector("a[name=index_" + letter + "]");
                    index_alpha = angular.element(index_alpha);
                    var scrollTop = index_alpha.attr("scrollTop");
                    if (scrollTop) {
                        $ionicScrollDelegate.scrollTo(0, scrollTop, true);
                    }
                }
            }
        };
    });

angular.module('chat.directive')
    .directive('qqFace', [function() {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/qqface/qqface.tpl',
            replace: true,
            scope: {
                selectQqFace: "&selectQqFace"
            },
            link: function(scope, element, attrs, controller) {
                // 表情选择事件
                scope.chooseFace = function(evt) {
                    if (evt.srcElement.title) {
                        var text_content = document.querySelector("#text_content");
                        scope.selectQqFace()("[" + event.srcElement.title + "]");
                    }
                }
            }
        };
    }]);

angular.module('chat.directive')
    .directive('resFriendTeam', function ($ionicLoading, $timeout, ResFriend, ResTeam) {
        return {
            restrict: "E",
            templateUrl: 'dev/static/tab_chat/directives/resfriendteam/resfriendteam.tpl',
            replace: true,
            scope: {
                friendsMessage_local: "=friendsMessagel",
                groupinviteList_local: "=groupinviteList",
                responseReq_local: "&responseReq",
            },
            link: function (scope, element, attrs, controller) {
                scope.responseReq_local = function (id, name, type, state, $index) {
                    if (type == "PRIVATE") {
                        // 好友请求 UserID, FriendID, state
                        ResFriend(curUID, id, state, callback);
                    } else {
                        // 团队邀请 groupID, MemberID, state
                        ResTeam(id, curUID, state, callback);
                    }
                    var showMsg = '';
                    function callback(data) {
                        // 成功后删掉记录并刷新好友列表
                        var obj = {};
                        if (type == "PRIVATE") {
                            if (state == '1') {
                                showMsg = "您已添加" + name + "为好友!";
                                // 同步至融云(可选，已在服务端做同步)
                            } else {
                                showMsg = "您已拒绝" + name + "的好友请求!";
                            }
                            $ionicLoading.show({
                                template: showMsg
                            });
                            // 添加到通讯录
                            obj.id = id;
                            obj.name = name;
                            obj.alpha = makePy(obj.name)[0][0].toUpperCase();
                            obj.conversationType = 'PRIVATE';
                            obj.portrait = null;
                            $timeout(function () {
                                $ionicLoading.hide();
                            }, 750);
                            scope.responseReq()(obj,$index);
                        } else {
                            if (state == '1') {
                                showMsg = "您已加入群" + name + "!";
                            } else {
                                showMsg = "您已拒绝加入群" + name + "!";
                            }
                            $ionicLoading.show({
                                template: showMsg
                            });
                            // 添加到通讯录
                            obj.id = 'cre_' + id;
                            obj.number = 10;
                            obj.max_number = 30;
                            obj.name = name;
                            obj.conversationType = 'GROUP';
                            obj.type = 'create';
                            obj.portrait = null;//'亿达别苑维修工_200.png';
                            $timeout(function () {
                                $ionicLoading.hide();
                            }, 750);
                            scope.responseReq()(obj,$index,type);
                        }
                    }
                }
            }
        };
    });

/// 字符转码
; angular.module('chat.filter', [])
    .filter('trustHtml', function ($sce) {
        return function (input) {
            return $sce.trustAsHtml(input);
        }
    });

'use strict';
angular.module('chat.route', [])
    .config(['$stateProvider', function ($stateProvider) {
        $stateProvider
            .state('tab.call', {
                cache: false,
                url: '/call/:contactName?isCalling',
                controller: 'CallCtrl',
                templateUrl: 'dev/static/tab_chat/business/call/call.html'
            })
            .state('tab.chat', {
                url: '/chat',
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/contacts.html',
                        controller: 'contacts'
                    }
                }
            })
            .state('tab.friendInfo', {
                url: '/friendInfo/:targetId/:targetName/:conversationType',
                cache: false,
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/friendinfo.html',
                        controller: 'friendInfoCtrl'
                    }
                }
            })
            .state('tab.groupInfo', {
                url: '/groupInfo/:targetId/:targetName/:groupType/:conversationType',
                cache: false,
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/groupinfo.html',
                        controller: 'groupInfoCtrl'
                    }
                }
            })
            .state('tab.chatDetail', {
                url: '/chat-detail',
                params: { messageId: null, name: null, targetId: null, conversationType: null },
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/chat-detail.html',
                        controller: 'chatDetail'
                    }
                }
            })


            .state('tab.addTeam', {
                url: '/addTeam',
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/add/addTeam.html',
                        controller: 'addTeamCtrl'
                    }
                }
            })
            .state('tab.addTeammate', {
                url: '/addTeammate',
                params: { GroupID: null },
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/add/addTeammate.html',
                        controller: 'addTeammateCtrl'
                    }
                }
            })
            .state('tab.addFriend', {
                url: '/addFriend',
                views: {
                    'tab-chat': {
                        templateUrl: 'dev/static/tab_chat/tpl/add/addFriend.html',
                        controller: 'addFriendCtrl'
                    }
                }
            });
    }]);
;
var chats = angular.module('chat.services', []);

/**
 * Signaling
 * socket.io视频服务实例
 */
chats.provider('Signaling', function () {
    this.backendUrl = "";
    this.setBackendUrl = function (newUrl) {
        if (this.backendUrl == "") {
            this.backendUrl = newUrl;
        }
    }
    this.$get = function ($http, socketFactory) {
        var self = this;
        var myIoSocket = io.connect(self.backendUrl);
        mySocket = socketFactory({
            ioSocket: myIoSocket
        });
        return myIoSocket;
    }
});

// 用户全局引用
chats.factory('initRong', function ($rootScope, $state, _appKey) {
    function initRong(token) {
        $rootScope.arrMsgs = new Array();
        $rootScope.arrCons = new Array();
        // 融云初始化
        RongCloudLibPlugin.init({
            appKey: _appKey
        },
            function (ret, err) {
                if (ret) {
                    // alert('init:' + JSON.stringify(ret));
                }
                if (err) {
                    alert('init error:' + JSON.stringify(err));
                }
            }
        );
        RongCloudLibPlugin.setConnectionStatusListener(
            function (ret, err) {
                if (ret) {
                    // 只允许单用户登录
                    if (ret.result.connectionStatus == 'KICKED') {
                        alert('您的帐号已在其他端登录!');
                        $rootScope.hideTabs = false;
                        //$ionicHistory.clearCache();
                        $state.go('login');
                    }
                }
                if (err) {
                    alert('setConnectionStatusListener error:' + JSON.stringify(err));
                }
            }
        );
        // 建立连接
        RongCloudLibPlugin.connect({
            token: token
        },
            function (ret, err) {
                if (ret) {
                    $rootScope.$apply();
                }
                if (err) {
                    alert('init error:' + JSON.stringify(err));
                }
            }
        );
        // 消息接收
        RongCloudLibPlugin.setOnReceiveMessageListener(
            function (ret, err) {
                // 接收消息
                if (ret) {
                    $rootScope.arrMsgs.push(JSON.stringify(ret.result.message));
                    $rootScope.$apply();
                }
                if (err) {
                    alert('setOnReceiveMessageListener error:' + JSON.stringify(err));
                }
            }
        );
    }
    return {
        init: initRong
    };
})
    // 好友服务
    .factory('Friends', function (RequestUrl, getFriends, Signaling, currentUser, $interval) {
        var loaded = false;
        var friends = [];
        var userids = [];
        var curUID = currentUser.getUserinfo().UserID;

        // 后台请求数据
        function loadData(callback) {
            getFriends(curUID, function (data) {
                friends = [];
                var retdata = data.data;
                var dataLen = retdata.length;
                for (var i = 0; i < dataLen; i++) {
                    var obj = {};
                    obj.id = retdata[i].UserID;
                    obj.name = retdata[i].UserName == null ? "无名(" + retdata[i].UserID + ")" : retdata[i].UserName;
                    obj.alpha = makePy(obj.name)[0][0].toUpperCase();
                    obj.conversationType = 'PRIVATE';
                    obj.online = '0';
                    obj.Mobile = retdata[i].Mobile;
                    var portrait = retdata[i].headimgurl ? (retdata[i].headimgurl.indexOf("http") == -1 ? RequestUrl + 'Images/Photo/' + retdata[i].headimgurl : retdata[i].headimgurl) : null;
                    obj.portrait = portrait;
                    friends.push(obj);
                }

                // 按字母排序
                friends = friends.sort(function (a, b) {
                    var bool = a.alpha > b.alpha;
                    return bool ? 1 : -1;
                });

                // 删除本人
                var retIndex;
                for (var i = 0; i < friends.length; i++) {
                    if (friends[i].id == curUID) {
                        retIndex = i;
                        break;
                    }
                }
                if (retIndex) {
                    friends.splice(retIndex, 1);
                }

                // 首字母索引位置计算
                var friendCount = friends.length;
                var nowalpha = '';
                var alphaCount = 0;
                for (var m = 0; m < friendCount; m++) {
                    var tmp = friends[m];
                    if (tmp.alpha != nowalpha) {
                        nowalpha = obj.alpha;
                        alphaCount++;
                    }
                    friends[m].scrollHeight = m * 42 + alphaCount * 20;
                    userids.push(tmp.id);
                }
                // 获取在线列表
                Signaling.emit('checkOnline', userids);
                checkOnlineCallback(callback);
            });
        }
        // 刷新在线列表(10s)
        $interval(function () {
            if (loaded) {
                Signaling.emit('checkOnline', userids);
            }
        }, 10000);
        // 获取在线列表
        function checkOnlineCallback(callback) {
            // 确保事件只注册一次
            if (!loaded) {
                loaded = true;
                Signaling.on('checkOnline_suc', function (ids) {
                    var friendlistCount = friends.length;
                    for (var m = 0; m < friendlistCount; m++) {
                        var tmp = friends[m];
                        for (var n = 0; n < ids.length; n++) {
                            if (tmp.id == ids[n].id) {
                                friends[m].online = "1";
                            }
                        }
                    }
                    if (callback) {
                        callback(friends);
                    }
                });
            }
        }

        return {
            // 获取好友列表
            all: function (callback) {
                if (friends.length > 0) {
                    callback(friends);
                } else {
                    loadData(callback);
                    $interval(function () {
                        loadData(callback);
                    }, 3000);
                }
            },
            //（获取某好友）
            get: function (friendId) {
                var retIndex = -1;
                for (var i = 0; i < friends.length; i++) {
                    if (friends[i].id == friendId) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? friends[retIndex] : null;
            },
            //（未启用）
            set: function (val) {
                friends = val;
            },
            //（未启用）
            add: function (friend) { }
        }
    })
    // 群组服务
    .factory('Groups', function (getTeams, RequestUrl, Signaling, currentUser, $rootScope,
        getGroupMembers, $interval) {
        var groups = [];
        var groupsMenmberinfo = [];
        var globalUser = currentUser;
        var curUID = globalUser.getUserinfo().UserID;
        var projectCode = globalUser.getUserinfo().PCode;

        // 后台请求数据
        function loadData(callback) {
            projectCode = globalUser.getUserinfo().PCode;
            getTeams.load(curUID).then(function (teamList) {
                // ==此方法会造成一段时间无数据(加载数据会造成时延)==
                groups = [];
                groupsMenmberinfo = [];
                var dataLen = teamList.length;
                for (var i = 0; i < dataLen; i++) {
                    teamList[i].conversationType = 'GROUP';
                    teamList[i].type = 'create';
                    (function (compid) {
                        var rid = compid.substr(4);
                        getGroupMembers(rid, function (data) {
                            groupsMenmberinfo.push({ id: compid, members: data.data });
                        });
                    })(teamList[i].id);
                }
                groups = teamList;
                callback(groups)
            });
        }

        //TODO:组判重
        function groupsIsExist() { }
        //TODO:组员判重
        function menmberIsExist() { }

        return {
            all: function (callback) {
                if (groups.length > 0) {
                    callback(groups);
                } else {
                    loadData(callback);
                    $interval(function () {
                        loadData(callback);
                    }, 10000);
                    $rootScope.$on("change Project", function (evt, PCode, PName) {
                        loadData(callback);
                    });
                }
            },
            set: function (val) {
                groups = val;
            },
            get: function (groupId) {
                var retIndex = -1;
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i].id == groupId) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? groups[retIndex] : null;
            },
            // 获取组内成员
            getGroupMember: function (groupId, userid) {
                var retIndex = -1;
                var arrLen = groupsMenmberinfo.length;
                for (var i = 0; i < arrLen; i++) {
                    var tmpgroup = groupsMenmberinfo[i];
                    if (tmpgroup.id == groupId && tmpgroup.members) {
                        var tmpmemLen = tmpgroup.members.length;
                        for (var j = 0; j < tmpmemLen; j++) {
                            var tempUser = tmpgroup.members[j];
                            if (tempUser.UserID == userid) {
                                return {
                                    id: tempUser.UserID,
                                    name: tempUser.UserName,
                                    img: tempUser.headimgurl
                                };
                            };
                        }
                    }
                }
                return null;
            }
        }
    })
    // 好友请求服务
    .service("ResFriend", function ($http, httpXhr, $timeout) {
        ///UserID 自己
        ///FriendID:接收人
        ///state{0：发邀请，1:接受，-1：拒绝}
        function ResFriend(UserID, FriendID, state, callback) {
            var obj = { UserID: +UserID, FriendID: +FriendID, state: +state };
            var data = JSON.stringify(obj);
            httpXhr.getData('UserInfo_newBLL.ResFriend', { model: data }).then(function (data) {
                callback(data);
            });
        }
        return ResFriend;
    })
    // 群组请求服务
    .service("ResTeam", function ($http, httpXhr, $timeout) {
        ///groupID 群组名称
        ///MemberID:自己
        ///state{0：发邀请，1:接受，-1：拒绝}
        function ResTeam(groupID, MemberID, state, callback) {
            var obj = { groupID: groupID.substr(4), MemberID: MemberID, state: state };
            var data = JSON.stringify(obj);
            httpXhr.getData('UserInfo_newBLL.ResTeam', { model: data }).then(function (data) {
                callback(data);
            });
        }
        return ResTeam;
    })
    // 加载好友
    .service("getFriends", function ($http, httpXhr, $timeout) {
        /// UserID
        function getFriends(userid, callback) {
            var data = JSON.parse('{"data":[{"UserID":16,"IsProject":true,"UserName":"亿达别苑维修工","UserAccount":"ydwxg","headimgurl":"nxt.png"},{"UserID":17,"IsProject":true,"UserName":"亿达别苑客服","UserAccount":"ydkf","headimgurl":"nxt.png"},{"UserID":18,"IsProject":true,"UserName":"亿达别苑工程主管","UserAccount":"ydgczg","headimgurl":"nxt.png"},{"UserID":384,"IsProject":true,"UserName":"彭奕","UserAccount":"py","headimgurl":"15602452846-201609051736.png"},{"UserID":386,"IsProject":true,"UserName":"刘新琼","UserAccount":"lxq","headimgurl":"lxq-20161010177.png"},{"UserID":388,"IsProject":true,"UserName":"袁晓勇","UserAccount":"yxy","headimgurl":"13760425110-201609191259.png"},{"UserID":412,"IsProject":true,"UserName":"何总","UserAccount":"heyc","headimgurl":"heyc-201609142139.png"},{"UserID":414,"IsProject":true,"UserName":"万华利","UserAccount":"wanhuali","headimgurl":null},{"UserID":415,"IsProject":true,"UserName":"李建民","UserAccount":"lijm","headimgurl":"lijm-201609220947.png"},{"UserID":417,"IsProject":true,"UserName":"肖荣界","UserAccount":"xiaorj","headimgurl":null},{"UserID":419,"IsProject":true,"UserName":"李文帅","UserAccount":"liws","headimgurl":null},{"UserID":420,"IsProject":true,"UserName":"陈国辉","UserAccount":"chengh","headimgurl":null},{"UserID":421,"IsProject":true,"UserName":"叶昱君","UserAccount":"yeyj","headimgurl":null},{"UserID":422,"IsProject":true,"UserName":"郭仲春","UserAccount":"guozc","headimgurl":null},{"UserID":423,"IsProject":true,"UserName":"李斌","UserAccount":"lib","headimgurl":null},{"UserID":424,"IsProject":true,"UserName":"周文","UserAccount":"zhouw","headimgurl":"zhouw-201609202117.png"},{"UserID":425,"IsProject":true,"UserName":"田克清","UserAccount":"tiankq","headimgurl":null},{"UserID":426,"IsProject":true,"UserName":"戴白露","UserAccount":"daibl","headimgurl":null},{"UserID":427,"IsProject":true,"UserName":"黄金云","UserAccount":"haungjy","headimgurl":null},{"UserID":428,"IsProject":true,"UserName":"高明霞","UserAccount":"gaomx","headimgurl":null},{"UserID":431,"IsProject":true,"UserName":"钟盛樱","UserAccount":"zhongsy","headimgurl":null},{"UserID":432,"IsProject":true,"UserName":"朱雷","UserAccount":"zhul","headimgurl":null},{"UserID":433,"IsProject":true,"UserName":"戴露","UserAccount":"dl","headimgurl":"dl-201609191259.png"},{"UserID":434,"IsProject":true,"UserName":"黄健","UserAccount":"hj","headimgurl":"hj-201609202146.png"},{"UserID":435,"IsProject":true,"UserName":"周枫","UserAccount":"zf","headimgurl":"zf-201609202116.png"},{"UserID":436,"IsProject":true,"UserName":"蔡强","UserAccount":"cq","headimgurl":null},{"UserID":437,"IsProject":true,"UserName":"宋细辉","UserAccount":"sxh","headimgurl":"sxh-201609191313.png"},{"UserID":438,"IsProject":true,"UserName":"关观海","UserAccount":"ggh","headimgurl":null},{"UserID":439,"IsProject":true,"UserName":"安志强","UserAccount":"azq","headimgurl":null},{"UserID":440,"IsProject":true,"UserName":"欧阳德才","UserAccount":"oydc","headimgurl":null},{"UserID":441,"IsProject":true,"UserName":"卢蝶","UserAccount":"ld","headimgurl":"ld-201609201557.png"},{"UserID":442,"IsProject":true,"UserName":"李萍","UserAccount":"lp","headimgurl":"lp-201609200945.png"},{"UserID":443,"IsProject":true,"UserName":"胡小振","UserAccount":"hxz","headimgurl":null},{"UserID":444,"IsProject":true,"UserName":"林志章","UserAccount":"lzz","headimgurl":null}]}');
            callback(data);
        }
        return getFriends;
    })
    // 加载团队
    .service("getTeams", function ($http, httpXhr, $timeout, $q) {
        /// UserID
        // function getTeams(userid, callback) {
        //     httpXhr.getData('urk', { UserID: userid }).then(function (data) {
        //         callback(data);
        //     });
        // }
        var defer = $q.defer();
        var data = [
            { id: 'prj_8', number: 12, max_number: 30, name: '香年广场', portrait: null },
            { id: 'prj_11', number: 12, max_number: 30, name: '安徽大厦', portrait: null },
            { id: 'prj_15', number: 12, max_number: 30, name: '有色大厦', portrait: null }
        ];

        $timeout(function () {
            defer.resolve(data);
        }, 2000);
        this.load = function (userid) {
            return defer.promise;
        }
    })
    // 加载好友请求
    .service("FindFriendsReq", function ($http, httpXhr, $interval) {
        /// UserID
        var friendRquestList = [];
        var intervalid = 0;

        function FindFriendsReq(userid, callback) {
            httpXhr.getData('UserInfo_newBLL.FindFriendsReq', { UserID: userid }).then(function (data) {
                var retData = data.data;
                var dataLen = retData.length;
                friendRquestList = [];
                for (var i = 0; i < dataLen; i++) {
                    var friendRquest = {};
                    friendRquest.id = retData[i].UserID;
                    friendRquest.name = retData[i].UserName;
                    friendRquest.info = "[" + retData[i].UserName + "]" + "请求添加您为好友！";
                    friendRquest.portrait = retData[i].headimgurl;
                    friendRquest.type = "PRIVATE";
                    friendRquestList.push(friendRquest);
                }
                callback(friendRquestList);
            });
        }

        var friendsReqApi = {
            all: function (userid, callback) {
                if (friendRquestList.length > 0) {
                    callback(friendRquestList);
                } else {
                    FindFriendsReq(userid, callback);
                    clearInterval(intervalid);
                    /// 10s
                    intervalid = $interval(function () {
                        FindFriendsReq(userid, callback);
                    }, 10000);
                }
            }
        };
        return friendsReqApi;
    })
    // 加载团队请求
    .service("findTeamsReq", function ($http, httpXhr, $interval) {
        var teamRquestList = [];
        var intervalid = 0;
        /// UserID
        function findTeamsReq(userid, callback) {
            httpXhr.getData('UserInfo_newBLL.findTeamsReq', { UserID: userid }).then(function (data) {
                teamRquestList = [];
                var retData = data.data;
                var dataLen = retData.length;
                for (var i = 0; i < dataLen; i++) {
                    var groupRquest = {};
                    var tempdata = retData[i];
                    groupRquest.id = 'cre_' + tempdata.GroupID;
                    groupRquest.name = tempdata.GroupName;
                    groupRquest.info = (tempdata.UserName == null ? "(无名)" : tempdata.UserName) + "邀您加入群:" + "[" + tempdata.GroupName + "]";
                    groupRquest.portrait = null;
                    groupRquest.type = "GROUP";
                    teamRquestList.push(groupRquest);
                }
                callback(teamRquestList);
            });
        }
        var teamsReqApi = {
            all: function (userid, callback) {
                if (teamRquestList.length > 0) {
                    callback(teamRquestList);
                } else {
                    findTeamsReq(userid, callback);
                    clearInterval(intervalid);
                    intervalid = $interval(function () {
                        findTeamsReq(userid, callback);
                    }, 10000);
                }
            }
        };
        return teamsReqApi;
    })
    //团队成员
    .service("getGroupMembers", function ($http, httpXhr) {
        function getGroupMembers(groupID, callback) {
            if (!groupID) {
                return;
            }
            httpXhr.getData('UserInfo_newBLL.getGroupMembers', { groupID: groupID }).then(function (data) {
                callback(data);
            });
        }
        return getGroupMembers;
    })
    // 协同全局未读消息计算
    .service("chatUnreadMessage", function ($rootScope) {
        var messages = 0;
        var chatUnreadMessageservive = {
            getUnreadMessage: function () {
                return messages;
            },
            setUnreadMessage: function (val) {
                messages = val;
                $rootScope.chatUnreadMessageNum = val;
                return;
            },
            addUnreadMessage: function (val) {
                messages += val;
                $rootScope.chatUnreadMessageNum = messages;
                return;
            }
        }
        return chatUnreadMessageservive;
    })
    // 全局消息监听
    .service("newMessageEventService", function ($rootScope) {
        var msgService = {
            broadcast: function (data) {
                $rootScope.$broadcast("newMsg", data);
            },
            listen: function (callback) {
                $rootScope.$on("newMsg", callback);
            }
        };
        return msgService;
    })
    // 未读消息模拟（For PC）
    .service("unreadMessages", function ($http, $rootScope, $timeout) {
        var unreadMessages = [
            { unreadMessageCount: 2, latestMessage: 'ficl upi' },
        ];
        var util = {
            getUnreadList: function () {
                var arr = [{
                    targetId: 11,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat11!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 12,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat12!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 14,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat14!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 13,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat13!',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                }, {
                    targetId: 16,
                    senderUserId: 1,
                    sentTime: '2016-06-01 10:00',
                    unreadMessageCount: 2,
                    latestMessage: 'i am bat!12',
                    conversationType: 'PRIVATE',
                    conversationTitle: '陌生人'
                },];
                // 模拟新消息
                $timeout(function () {
                    $rootScope.$broadcast("newMsg",
                        '{"targetId": 11, "senderUserId": 1, "sentTime":"2016-06-01 10:00", '
                        + '"content": {"text":"new message"}, "conversationType": "PRIVATE", "objectName": "RC:TxtMsg"}');
                }, 4000);
                return arr;
            },
        }
        return util;
    })
    // 黑名单服务
    .factory('Blacklist', function () {
        var lists = [
            { id: 'group1', username: 'group1', portrait: 'img/personPhoto.png' },
            // { id: 'grp6', username: 'grp6', portrait: 'img/personPhoto.png'}
        ];
        return {
            all: function () {
                return lists;
            },
            set: function (val) {
                lists = val;
            },
            addOne: function (val) {
                lists.push(val);
            },
            removeOne: function (val) {
                for (var i = 0; i < lists.length; i++) {
                    if (lists[i].id == val) {
                        lists.splice(i, 1);
                        break;
                    }
                }
            },
            get: function (id) {
                // Simple index lookup
                var retIndex = -1;
                for (var i = 0; i < lists.length; i++) {
                    if (lists[i].id == id) {
                        retIndex = i;
                        break;
                    }
                }
                return retIndex > -1 ? lists[retIndex] : null;
            }
        }
    })
    .factory('FormateRongyunErr', function (myNote) {
        return {
            formate: function (err) {
                var errcode = 1;
                if (err && err.code) {
                    errcode = err.code;
                } else if (err && err.result) {
                    errcode = err.result.code;
                }
                switch (errcode) {
                    case 30001:
                        myNote.myNotice('网络出现问题，请检查网络! 30001');
                        break;
                    case -10000:
                        myNote.myNotice('网络出现问题，请检查网络!-10000');
                        break;
                    case -1:
                        myNote.myNotice('初始化失败！重启试试？! -1');
                        break;
                    default:
                        break;
                }
            }
        }
    })
    .factory('rongyunService', function ($q, FormateRongyunErr) {
        return {
            /**
             * 获取历史数据
             */
            getConversationList: function (targetid, ctype) {
                var oldestMessageId = 0;
                var promise = $q.defer();
                RongCloudLibPlugin.getConversationList(
                    function (ret, err) {
                        if (ret) {
                            promise.resolve(ret);
                        }
                        if (err) {
                            FormateRongyunErr.formate(err);
                        }
                    }
                );
            },
            getHistoryMsg: function (targetid, ctype) {
                var oldestMessageId = 0;
                var promise = $q.defer();
                RongCloudLibPlugin.getHistoryMessages({
                    conversationType: ctype,
                    targetId: targetid,
                    count: 5,
                    oldestMessageId: oldestMessageId
                },
                    function (ret, err) {
                        if (ret) {
                            var result = new Array(),
                                tmp;
                            for (var i = ret.result.length - 1; i >= 0; i--) {
                                tmp = ret.result[i];
                                tmp = myUtil.resolveMsg(tmp);
                                result.push(tmp);
                            }
                            var hisArr = result.concat($scope.hisMsgs);
                            promise.resolve(hisArr);

                        }
                        if (err) {
                            alert("getHistoryMessages error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendMessage: function (ctype, target, content) {
                var promise = $q.defer();
                RongCloudLibPlugin.sendTextMessage({
                    conversationType: ctype,
                    targetId: target,
                    text: content,
                    extra: "extra text"
                },
                    function (ret, err) {
                        if (ret) {
                            //消息此时未发送成功，可以加入样式标明
                            if (ret.status == "prepare") {
                                // alert('你发了文字消息：' +JSON.stringify(ret));
                                promise.resolve(ret.result.message);
                            }
                            //成功后更新样式
                            if (ret.status == "success") {
                                // alert("success");
                            }
                        }
                        if (err) {
                            alert("发送文本消息 error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            clearMessagesUnreadStatus: function (conversationType, targetId) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearMessagesUnreadStatus({
                    conversationType: conversationType,
                    targetId: targetId
                },
                    function (ret, err) {
                        promise.resolve(ret);
                        if (err) {
                            alert("标为已读 error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            getLatestMsg: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.getLatestMessages({
                    conversationType: ctype,
                    targetId: targetid,
                    count: 15
                },
                    function (ret, err) {
                        //alert("getLatestMessages ret:" + JSON.stringify(ret));
                        if (ret) {
                            var result = [];
                            var tmp;
                            for (var i = ret.result.length - 1; i >= 0; i--) {
                                tmp = ret.result[i];
                                if (ctype == "GROUP" && members.length > 0) {
                                    for (var m = 0; m < members.length; m++) {
                                        if (members[m].id == tmp.senderUserId) {
                                            tmp.name = members[m].name;
                                        }
                                    }
                                }
                                tmp = myUtil.resolveMsg(tmp);
                                // 处理IOS倒序顺序bug
                                if (isIOS) {
                                    result.push(tmp);
                                } else {
                                    result.unshift(tmp);
                                }
                            }
                            promise.resolve(result);
                        }
                        if (err) {
                            alert("getLatestMessages error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendImageMessage: function (ctype, targetId, imageURI) {
                var isIOS = ionic.Platform.isIOS();
                var isAndroid = ionic.Platform.isAndroid();
                var picPath = imageURI;
                if (isIOS) {
                    picPath = imageURI.replace('file://', '');
                }
                if (isAndroid) {
                    if (imageURI.indexOf('?') !== -1) {
                        picPath = imageURI.substring(0, imageURI.indexOf('?'));
                    } else { }
                }
                var promise = $q.defer();
                RongCloudLibPlugin.sendImageMessage({
                    conversationType: ctype,
                    targetId: targetId,
                    imagePath: picPath,
                    extra: ""
                },
                    function (ret, err) {
                        if (ret) {
                            //消息此时未发送成功，可以加入样式标明；成功后更新样式
                            if (ret.status == "prepare") {
                                // alert("prepare");
                                promise.resolve(ret.result.message);

                            }
                            if (ret.status == "success") {
                                //alert("success");
                            }
                        }
                        if (err) {
                            alert("sendImageMessage error: " + JSON.stringify(err));
                        }
                    }
                );
            },
            sendVoiceMessage: function (ctype, targetId, tmpPath, dur) {
                var promise = $q.defer();
                // 发送语音消息
                RongCloudLibPlugin.sendVoiceMessage({
                    conversationType: ctype,
                    targetId: targetId,
                    voicePath: tmpPath,
                    duration: dur,
                    extra: ""
                },
                    function (ret, err) {
                        if (ret) {
                            $scope.lstResult = "sendVoiceMessage:" + JSON.stringify(ret);
                            // TODO:消息此时未发送成功，可以加入样式标明；成功后更新样式
                            if (ret.status == "prepare") {
                                // alert("sendVoiceMessage prepare2:" + JSON.stringify(ret));
                                promise.resolve(data);
                            }
                            // TODO:后续加入发送成功后修改显示样式
                            if (ret.status == "success") {
                                // alert("success");
                            }
                        }
                        if (err) { // TODO:这里需要对错误状态进行判断并友好的提示用户
                            alert("语音消息输入过短! ");
                            //alert("语音消息发送错误: " + JSON.stringify(err));
                        }
                    }
                );
            },
            clearConversition: function (ctype, targetId, tmpPath, dur) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearConversations({
                    conversationTypes: ["PRIVATE", "GROUP"]
                },
                    function (ret, err) {
                        if (ret) {
                            alert("已清除所有会话: " + result.status);
                            promise.resolve();
                        }
                        if (err) {
                            FormateRongyunErr.formate(err);
                        }
                    }
                );
            },
            clearMessagesUnreadStatus: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.clearMessagesUnreadStatus({
                    conversationType: type,
                    targetId: targetId
                }, function (ret, err) {
                    // test succeed
                    promise.resolve();
                    if (err) {
                        FormateRongyunErr.formate(err);
                    }
                });
            },
            removeConversation: function (targetid, ctype) {
                var promise = $q.defer();
                RongCloudLibPlugin.removeConversation({
                    conversationType: type,
                    targetId: targetId
                }, function (ret, err) {
                    promise.resolve();
                    //alert(ret.status);
                    if (err) {
                        FormateRongyunErr.formate(err);
                    }
                });
            }
        }
    })
    .factory('mediaService', function () {
        var isIOS = ionic.Platform.isIOS();
        var isAndroid = ionic.Platform.isAndroid();
        var mediaRec;
        var path = "";
        // media路径处理
        var src = "cordovaIMVoice.amr";
        if (isIOS) {
            // path = cordova.file.documentsDirectory;
            src = "cordovaIMVoice.wav";
        } else {
            // path = cordova.file.externalApplicationStorageDirectory;
        }
        // url辅助方法
        function getMediaURL(s) {
            if (device.platform.toLowerCase() === "android") return path + s;
            return (path + s).replace('file://', '');
        }
        function getNewMediaURL(s) {
            if (device.platform.toLowerCase() === "android") return path + s;
            return "documents://" + s;
        }
        function getPhoneGapPath() {
            // bug
            var path = window.location.pathname;
            path = path.substr(path, path.length - 9);
            if (isIOS) {// ios
                return 'img/vedio-chat.mp3';
            } else {
                //alert('file://' + path + 'img/vedio-chat.mp3');
                //路径有问题
                return 'file://' + path + 'img/vedio-chat.mp3';
            }
        };
        return {
            playSound: function () {
                //实例化录音类, src:需要播放的录音的路径
                var ring = new Media(getPhoneGapPath(),
                    // 成功操作
                    function () {
                    },
                    // 失败操作
                    function (err) {
                    }
                );
                //开始播放录音
                ring.play();
            },
            startRecord: function () {
                if (mediaRec) {
                    mediaRec.release();
                }
                //实例化录音类
                mediaRec = new Media(getNewMediaURL(src),
                    // 录音执行函数
                    function () { },
                    // 录音失败执行函数
                    function (err) { }
                );
                //开始录音
                mediaRec.startRecord();
            },
            finishRecord: function () {
                var promise = $q.defer();
                if (mediaRec) {
                    mediaRec.stopRecord();
                    mediaRec.release();
                }
                //实例化录音类, src:需要播放的录音的路径
                mediaRec = new Media(getMediaURL(src),
                    // 成功操作
                    function () {
                        console.log("touchend():Audio Success");
                    },
                    // 失败操作
                    function (err) {
                        console.log("touchend():Audio Error: " + err.code);
                    }
                );
                mediaRec.play();
                mediaRec.stop();

                //在html中显示当前状态
                var counter = 0;
                var timerDur = setInterval(function () {
                    counter = counter + 100;
                    if (counter > 2000) {
                        clearInterval(timerDur);
                    }
                    var dur = mediaRec.getDuration();
                    if (dur > 0) {
                        clearInterval(timerDur);
                        // alert('mediaRec.getDuration():' + dur);
                        // alert('mediaRec.src:' + mediaRec.src);
                        var tmpPath = mediaRec.src;
                        if (isIOS) {
                            tmpPath = path + src;
                        }
                        tmpPath = tmpPath.replace('file://', '');
                        promise.resolve(tmpPath, mediaRec);
                    }
                }, 100);
            }
        }
    })
    .factory('phoneRTCService', function () {
        return {
            createSession: function (isInitiator) {
                if (isInitiator) {
                    sendMessage('[发起视频通话]');
                }
                console.log(new Date().toString() + ': calling to ' +
                    contactName + ', isInitiator: ' + isInitiator);
                // 自个服务器 turn server
                var config = {
                    isInitiator: isInitiator,
                    stun: {
                        host: 'stun:115.29.51.196'
                    },
                    turn: {
                        host: 'turn:115.29.51.196',
                        username: 'test',
                        password: 'test'
                    },
                    streams: {
                        audio: true, // 支持音频
                        video: true, // 支持视频
                    }
                };

                var session = new cordova.plugins.phonertc.Session(config);
            }
        }
    });
angular.module('chat.controllers',[]);
angular.module('chat.call', [])
    // 通话
    .controller('CallCtrl', function ($scope, $state, $rootScope, $timeout, $interval, $ionicHistory,
        $ionicModal, $stateParams, signaling, CacheFactory, Friends, rongyunService, mediaService) {
        var duplicateMessages = [];
        // 是否通话中
        $scope.callInProgress = false;
        // 是否主动发起
        $scope.isCalling = $stateParams.isCalling === 'true';
        // 响铃
        if (!$scope.isCalling) {
            mediaService.playSound();
        }

        //alert('isCalling:'+ $scope.isCalling +"type:"+ typeof $scope.isCalling );
        // 获取联系人
        $scope.contacts = {};
        $scope.muted = false;
        var contactUser = Friends.get($stateParams.contactName);
        if (!contactUser) {
            return;
        }
        $scope.contactUser = contactUser;
        $scope.contactName = contactUser.id;

        function call(isInitiator, contactName) {
            if (isInitiator) {
                sendMessage('[发起视频通话]');
            }
            // session通话初始化
            var session = phoneRTCService.createSession();
            session.on('sendMessage', function (data) {
                signaling.emit('sendMessage', contactName, {
                    type: 'phonertc_handshake',
                    data: JSON.stringify(data)
                });
            });
            session.on('answer', function () {
                // console.log('Answered!');
            });
            session.on('disconnect', function () {
                if ($scope.contacts[contactName]) {
                    delete $scope.contacts[contactName];
                }
                if (Object.keys($scope.contacts).length === 0) {
                    signaling.emit('sendMessage', contactName, { type: 'ignore' });
                    //junmback();
                    alert('************disconnects*************');
                }
            });
            session.call();
            // 保存连接
            $scope.contacts[contactName] = session;
        }
        // 拨号[发起]
        if ($scope.isCalling) {
            //alert('发起聊天：' + $scope.contactName + 'is Calling:' + $scope.isCalling);
            signaling.emit('sendMessage', $scope.contactName, { type: 'call' });
        }

        // 忽略
        $scope.ignore = function (msg) {
            alert('忽略');
            if (ring) {
                ring.release();
            }
            sendMessage(msg);
            var contactNames = Object.keys($scope.contacts);
            if (contactNames.length > 0) {
                $scope.contacts[contactNames[0]].disconnect();
            } else {
                signaling.emit('sendMessage', $scope.contactName, { type: 'ignore' });
                $scope.callInProgress = false;
                junmback();
            }
        };

        // 结束通话
        $scope.end = function () {
            alert('结束');
            sendMessage('[结束通话]');
            Object.keys($scope.contacts).forEach(function (contact) {
                $scope.contacts[contact].close();
                delete $scope.contacts[contact];
            });
            signaling.emit('sendMessage', $scope.contactName, { type: 'end' });
            $scope.callInProgress = false;
            junmback();
        };

        // 接听
        $scope.answer = function () {
            //alert('接听');
            if (ring) {
                ring.release();
            }
            if ($scope.callInProgress) {
                alert('*****正在通话中哦*****');
                return;
            }
            $scope.callInProgress = true;
            // 1s 后显示视频
            $timeout($scope.updateVideoPosition, 1000);
            call(false, $scope.contactName);
            // 1.5s 后接听
            setTimeout(function () {
                signaling.emit('sendMessage', $scope.contactName, { type: 'answer' });
            }, 1500);
        };

        // 静音
        // $scope.toggleMute = function () {
        //     $scope.muted = !$scope.muted;
        //     Object.keys($scope.contacts).forEach(function (contact) {
        //         var session = $scope.contacts[contact];
        //         session.streams.audio = !$scope.muted;
        //         session.renegotiate();
        //     });
        // };

        $scope.updateVideoPosition = function () {
            $rootScope.$broadcast('videoView.updatePosition');
        };

        // === socket.io消息分类处理(BEGIN) ===
        function onMessageReceive(name, message) {
            switch (message.type) {
                case 'answer':
                    // alert('************别人点了接听呀*************');
                    $scope.$apply(function () {
                        $scope.callInProgress = true;
                        $timeout($scope.updateVideoPosition, 1000);
                    });

                    var existingContacts = Object.keys($scope.contacts);
                    if (existingContacts.length !== 0) {
                        signaling.emit('sendMessage', name, {
                            type: 'add_to_group',
                            contacts: existingContacts,
                            isInitiator: false
                        });
                    }
                    call(true, name);
                    // alert('************call 方法没有问题呀*************');
                    break;
                // 拒绝接听(忽略)
                case 'ignore':
                    var len = Object.keys($scope.contacts).length;
                    if (len > 0) {
                        if ($scope.contacts[name]) {
                            $scope.contacts[name].close();
                            delete $scope.contacts[name];
                        }
                        var i = $scope.hideFromContactList.indexOf(name);
                        if (i > -1) {
                            $scope.hideFromContactList.splice(i, 1);
                        }

                        if (Object.keys($scope.contacts).length === 0) {
                            $scope.callInProgress = false;
                            junmback();
                        }
                    } else {
                        $scope.callInProgress = false;
                        junmback();
                    }
                    break;
                // 结束通话
                case 'end':
                    // alert('对方已经结束通话');
                    Object.keys($scope.contacts).forEach(function (contact) {
                        $scope.contacts[contact].close();
                        delete $scope.contacts[contact];
                    });
                    $timeout(function () {
                        $scope.callInProgress = false;
                        junmback();
                    }, 1000);
                    break;
                case 'phonertc_handshake':
                    // 本意是屏蔽重复信息，这里我@kobepeng先去掉了
                    //if (duplicateMessages.indexOf(message.data) === -1) {
                    // key : receiveMessage
                    $scope.contacts[name].receiveMessage(JSON.parse(message.data));
                    //   duplicateMessages.push(message.data);
                    // }
                    break;
                case 'add_to_group':
                    alert("add_to_group");
                    message.contacts.forEach(function (contact) {
                        $scope.hideFromContactList.push(contact);
                        call(message.isInitiator, contact);
                        if (!message.isInitiator) {
                            $timeout(function () {
                                signaling.emit('sendMessage', contact, {
                                    type: 'add_to_group',
                                    contacts: [ContactsService.currentName],
                                    isInitiator: true
                                });
                            }, 1500);
                        }
                    });
                    break;
                case 'callInProgress':
                    alert('对方正在通话中!');
                    junmback();
                    break;
                default: break;
            }
        }
        signaling.on('messageReceived', onMessageReceive);
        $scope.$on('$destroy', function () {
            signaling.removeListener('messageReceived', onMessageReceive);
        });
        function sendMessage(content) {
            rongyunService.sendMessage("PRIVATE", contactUser.id, content).then(function (data) {
                appendNewMsg(data, true);
            });
        }
        function junmback() {
            $ionicHistory.goBack(-1);
        }
    });

angular.module('chat.controllers')
 .controller('addFriendCtrl', function ($scope, CacheFactory, myNote, HttpFactory, RequestUrl) {

        var cache = angular.fromJson(CacheFactory.get('UserAccount'));

        $scope.myTel = cache.Mobile;

        $scope.friend = 0;

        $scope.search = function (tel) {
            if (!/^1\d{10}$/.test(tel)) {
                myNote.myNotice('电话格式不对！');
            } else {
                HttpFactory.send({
                    url: RequestUrl + 'Action.ashx?Name=HYD.E3.Business.UserInfo_newBLL.SearchFriend',
                    data: {
                        Mobile: tel
                    },
                    method: 'post'
                }).success(function (data) {
                    if (data.data.length == 0) {
                        $scope.friend = 1;
                    } else {
                        $scope.friend = data.data[0];
                    }
                })
            }
        };

        $scope.add = function (FriendID) {
            var obj = {
                UserID: cache.UserID,
                FriendID: FriendID,
                JoinTime: new Date(),
                FromID: cache.UserID,
                state: 0
            };

            HttpFactory.send({
                url: RequestUrl + 'Action.ashx?Name=HYD.E3.Business.UserInfo_newBLL.AddFriend',
                data: {
                    model: angular.toJson(obj)
                },
                method: 'post'
            }).success(function () {
                myNote.myNotice('好友请求已发送,等待确认！');
                $scope.friend = 0;
            })
        };

    })
angular.module('chat.controllers')
    .controller('addTeamCtrl', function ($scope, RequestUrl, CacheFactory, $ionicPopup, HttpFactory,
        $ionicHistory, $cordovaContacts, myNote, $timeout) {
        var cache = angular.fromJson(CacheFactory.get('UserAccount'));
        $scope.task = {};
        var myPopup = $ionicPopup.show({
            template: '<input type="text" ng-model="task.title">',
            title: '输入组名：', // 创建项目组
            scope: $scope,
            buttons: [
                {
                    text: '取消',
                    onTap: function (e) {
                        $ionicHistory.goBack(-1);
                    }
                },
                {
                    text: '<b>保存</b>',
                    type: 'button-positive',
                    onTap: function (e) {
                        if (!$scope.task.title) {
                            myNote.myNotice('组名不能为空！', 3000);
                            e.preventDefault();
                        }
                    }
                }
            ]
        });
        myPopup.then(function () {
            myPopup.close();
        });
        HttpFactory.send({
            url: RequestUrl + 'Action.ashx?Name=HYD.E3.Business.UserInfo_newBLL.getFriends',
            data: {
                UserID: cache.UserID
            },
            method: 'post'
        }).then(function (data) {
            $scope.friends = data.data.data;
        });
        $scope.sure = function () {
            console.log($scope.friends);
            $scope.task.member = [];
            angular.forEach($scope.friends, function (data) {
                if (!!data.checked) {
                    $scope.task.member.push(data.UserID);
                }
            });
            createTeam($scope.task);
        };

        function createTeam(team) {
            HttpFactory.send({
                url: RequestUrl + 'createGroup',
                data: {
                    title: team.title,
                    UserID: cache.UserID,
                    members: angular.toJson(team.member)
                },
                method: 'post'
            }).then(function () {
                myNote.myNotice('邀请成功！', 3000);
                $timeout(function () {
                    $ionicHistory.goBack();
                }, 3000);
            });
        }

        $scope.getAllContacts = function () {
            var options = {};
            options.multiple = true;
            $cordovaContacts.find(options).then(function (allContacts) {
                //omitting parameter to .find() causes all contacts to be returned
                $scope.contacts = allContacts;
                alert(angular.toJson($scope.contacts[0]));
            }, function (err) {
                alert(err);
            });
        };
    })
    ;
angular.module('chat.controllers')
 .controller('addTeammateCtrl', function ($scope, RequestUrl, CacheFactory, $stateParams,
        $ionicPopup, HttpFactory, $cordovaContacts, $ionicHistory, myNote, $timeout) {
        var cache = angular.fromJson(CacheFactory.get('UserAccount'));
        var UserID = cache.UserID;
        var GroupID = $stateParams.GroupID;
        var task = {};

        HttpFactory.send({
            url: RequestUrl + 'Action.ashx?Name=HYD.E3.Business.UserInfo_newBLL.getTeammate',
            data: {
                UserID: UserID,
                GroupID: GroupID.substr(4)
            },
            method: 'post'
        }).then(function (data) {
            //MemberID  debugger;
            $scope.friends = data.data.data;
        });

        // 提交
        $scope.sure = function () {
            // console.log($scope.friends);
            task.member = [];
            angular.forEach($scope.friends, function (data) {
                if (!!data.checked && data.MemberID == "") {
                    task.member.push(data.UserID);
                }
            });
            addTeammate(task);
        };

        function addTeammate(team) {
            HttpFactory.send({
                url: RequestUrl + 'Action.ashx?Name=HYD.E3.Business.UserInfo_newBLL.addTeammate',
                data: {
                    UserID: UserID,
                    GroupID: GroupID.substr(4),
                    members: angular.toJson(team.member)
                },
                method: 'post'
            }).then(function () {
                myNote.myNotice('邀请成功！', 3000);
                $timeout(function () {
                    $ionicHistory.goBack();
                }, 3000);
            });
        }
    })
angular.module('chat.controllers')
    .controller('chatDetail', function ($scope, $rootScope, $stateParams, newMessageEventService, CacheFactory,
        $ionicScrollDelegate, $timeout, $state, Friends, Groups, $interval, $ionicModal, PhotoAndImages,
        getGroupMembers, currentUser, rongyunService, mediaService) {
        var viewScroll = $ionicScrollDelegate.$getByHandle('messageDetailsScroll');
        /***
         * bugfix purpose
         */
        $scope.fixReflowtag = false;
        var targetId = $stateParams.targetId;
        var conversationType = $stateParams.conversationType;
        $scope.name = $stateParams.name ? $stateParams.name : "";
        $scope.conversationType = conversationType;
        // 加载成员，用于显示姓名
        if ($scope.conversationType == "GROUP") {
            getGroupMem();
        }
        var members = [];
        function getGroupMem() {
            if (targetId && targetId.substr(0, 4) == "cre_") {
                getGroupMembers(targetId.substr(4), callback);
            }
            function callback(data) {
                var data = data.data;
                var length = data.length;
                for (var i = 0; i < length; i++) {
                    var obj = {};
                    obj.id = data[i].UserID;
                    obj.name = data[i].UserName;
                    members.push(obj);
                }
                getLatestMsg(targetId, "GROUP");
            }
        }

        // 语音消息交互(BEGIN)
        $scope.recordWait = false;
        $scope.isStartRecord = false;
        $scope.onVoiceHold = function () {
            $scope.isStartRecord = true;
            $scope.recordWait = false;
            try {
                //实例化录音类
                VoicechangeAnimation();
                mediaService.startRecord();
                return false;
            } catch (err) {
                dialog.show('err m:' + err)
            }
        }
        $scope.onVoiceRelease = function () {
            $scope.recordWait = true;
            $timeout(function () {
                $scope.isStartRecord = false;
            }, 1000);
            mediaService.finishRecord().then(function (tmpPath, mediaRec) {
                rongyunService.sendVoiceMessage(conversationType,
                    targetId, tmpPath, dur).then(function (data) {
                        mediaRec.release();
                        appendNewMsg(data, true);
                    });
            });
            return false;
        }
        //  工具栏交互
        $scope.send_content = {
            text: ''
        };
        $scope.showPhonebar = false;
        $scope.onShowPhonebar = function () {
            if (!$scope.showPhonebar) {
                $scope.showPhonebar = true;
                $scope.showWXFace = false;
                scrolltoBottom();
            } else if ($scope.showPhonebar && $scope.showWXFace) {
                $scope.showWXFace = false;
            } else if ($scope.showPhonebar && !$scope.showWXFace) {
                $scope.showPhonebar = false;
            }
        }
        $scope.showWXFace = false;
        $scope.onShowWXFace = function () {
            if (!$scope.showPhonebar) {
                $scope.showPhonebar = true;
                $scope.showWXFace = true;
                scrolltoBottom();
                document.querySelector("#text_content").focus();
            } else if ($scope.showPhonebar && !$scope.showWXFace) {
                $scope.showWXFace = true;
                document.querySelector("#text_content").focus();
            } else if ($scope.showPhonebar && $scope.showWXFace) {
                $scope.showPhonebar = false;
                $scope.showWXFace = false;
            }
        }
        $scope.selectQQFace = function (text_content) {
            $scope.send_content.text = $scope.send_content.text + text_content;
            document.querySelector("#text_content").focus();
        }
        // 拉取历史消息
        $scope.doRefresh = function () {
            console.log('Refreshing!');
            $timeout(function () {
                // 拉取历史消息
                rongyunService.getHistoryMsg(targetId, conversationType)
                    .then(function (data) {
                        $scope.hisMsgs = data;
                    });
                $scope.$broadcast('scroll.refreshComplete');
            }, 200);
        };
        $scope.onSendTextMessage = function () {
            var message = $scope.send_content.text;
            sendMessage(conversationType, targetId, message);
            $scope.send_content.text = '';
            scrolltoBottom();
        }
        $scope.hisMsgs = [];
        var init = function () {
            if (conversationType == 'PRIVATE') {
                getLatestMsg(targetId, 'PRIVATE');
            }
            clearMessagesUnreadStatus();
        }
        //init();

        // ===  融云消息处理(BEGIN) ===
        // 发送文本消息
        function sendMessage(ctype, target, content) {
            rongyunService.sendMessage(ctype, target, content).then(function (data) {
                appendNewMsg(data, true);
            })
        }
        // 标为已读
        function clearMessagesUnreadStatus() {
            var ctype = conversationType;
            var targetid = targetId;
            rongyunService.clearMessagesUnreadStatus(ctype, target).then(function (data) {
            });
        }
        // 获取最新消息
        function getLatestMsg(targetid, ctype) {
            rongyunService.getLatestMsg(targetid, ctype).then(function (data) {
                $scope.hisMsgs = result;
                scrolltoBottom();
            });
        }
        $scope.sendPhoto = sendPhoto;
        // 发送图片(chattoolbar发起)
        function sendPhoto(imageURI) {
            rongyunService.sendImageMessage(conversationType, targetId, imageURI).then(function (data) {
                appendNewMsg(data, true);
            });
        };
        // ===  融云消息处理(END) ===

        // 滚动至底部(有bug)
        function scrolltoBottom() {
            $timeout(function () {
                viewScroll.scrollBottom(true);
            }, 50);
            $scope.fixReflowtag = !$scope.fixReflowtag;
        }

        // 添加新消息
        function appendNewMsg(msg, flag) {
            var curMsg = myUtil.resolveMsg(msg);
            $scope.hisMsgs.push(curMsg);
            scrolltoBottom();
        }

        // 模拟声音大小变化
        $scope.voiceImg = { url: 'assets/img/voice/recog000.png' };
        function VoicechangeAnimation() {
            var voicechange = $interval(function () {
                if (!$scope.recordWait) {
                    var i = Math.round(Math.random() * 9);
                    $scope.voiceImg.url = 'img/voice/recog00' + i + '.png';
                } else {
                    voicechange = undefined;
                }
            }, 400);
        }
        // 视频通话
        $scope.onVoiceCall = function () {
            //alert('chatdetial:' + targetId);
            var obj = { isCalling: true, contactName: targetId };
            $state.go('tab.call', obj);
        }
        $scope.onVedioCall = function () {
            //alert('chatdetial:' + targetId);
            var obj = { isCalling: true, contactName: targetId };
            $state.go('tab.call', obj);
        }
        // 初次加载
        $scope.$on("$ionicView.enter", function () {
            scrolltoBottom();
            console.log('chatdetial.enter');
        });
        $scope.$on("$ionicView.beforeEnter", function () {
            scrolltoBottom();
        });
        window.addEventListener("native.keyboardshow", function (e) {
            scrolltoBottom();
        });

        // 监听消息发送事件(实时刷新消息)
        var newMsgCallBack = function (d, data) {
            var jsonMsg = JSON.parse(data);
            if (targetId == jsonMsg.targetId) {
                // clearMessagesUnreadStatus();
                // 获取群成员姓名
                if (jsonMsg.conversationType == "GROUP") {
                    if (members.length > 0) {
                        for (var m = 0; m < members.length; m++) {
                            if (members[m].id == jsonMsg.senderUserId) {
                                jsonMsg.name = members[m].name;
                            }
                        }
                    }
                }
                console.log('jsonMsg:', jsonMsg);
                var tmpMsg = myUtil.resolveMsg(jsonMsg);
                $scope.hisMsgs.push(tmpMsg);
                scrolltoBottom();
            }
        };
        newMessageEventService.listen(newMsgCallBack);
    })

angular.module('chat.controllers')
    // 协同主界面
    // todo：
    // 1. 根据项目编号切换联系人
    .controller('contacts', function ($scope, $state,
        $ionicScrollDelegate, $timeout, $interval, Friends, Groups, $rootScope,
        newMessageEventService, FindFriendsReq, findTeamsReq, rongyunService,
        unreadMessages, chatUnreadMessage, currentUser) {
        $scope.data = {
            searchword: ''
        };
        $scope.clearKeyword = function (data) {
            data.scorearchword = '';
        }
        // === tab切换 ===
        if (!$scope.currentFeedsType) {
            $scope.currentFeedsType = "contacttab";
        }
        $scope.messagetab = "messagetab";
        $scope.contacttab = "contacttab";
        var scrollPositonRec = { 'top': 0, 'left': 0 };
        var scrollPositonJob = { 'top': 0, 'left': 0 };
        $scope.tabswitch = function (feedsType) {
            if ($scope.currentFeedsType == "messagetab") {
                scrollPositonRec = $ionicScrollDelegate.getScrollPosition();
            } else if ($scope.currentFeedsType == "contacttab") {
                scrollPositonJob = $ionicScrollDelegate.getScrollPosition();
            }

            if (feedsType == "messagetab") {
                $ionicScrollDelegate.scrollTo(scrollPositonRec.left, scrollPositonRec.top);
            } else if (feedsType == "contacttab") {
                $ionicScrollDelegate.scrollTo(scrollPositonJob.left, scrollPositonJob.top);
            }

            $scope.currentFeedsType = feedsType;
        } // tabswitch
        // === 融云 ===
        $scope.groups = [];
        $scope.friends_message = [];
        $scope.friends_list = [];
        var dataL=[];
        // 好友/团队邀请
        $scope.friendinviteList = [];
        $scope.groupinviteList = [];
        var projectCode = currentUser.getUserinfo().PCode;
        var curUID = currentUser.getUserinfo().UserID;
        // 加载好友列表
        Friends.all(function (data) {
          $scope.friends_list = data;
        });
        // 加载群组
        Groups.all(function (data) {
            $scope.groups = data;
        });
        // 加载好友邀请
        FindFriendsReq.all(curUID, function (data) {
            $scope.friendinviteList = data;
        });
        // 加载群组邀请
        findTeamsReq.all(curUID, function (data) {
            $scope.groupinviteList = data;
        });
        // 同意与拒绝请求,成功后删掉记录并刷新好友列表
        function responseReq(obj, $index, type) {
            if (type == "PRIVATE") {
                // 不能直接插入，需要进行排序
                $scope.friends.unshift(obj);
                $timeout(function () {
                    $scope.friendinviteList.splice($index, 1);
                }, 400);
            } else {
                $scope.groups.unshift(obj);
                $timeout(function () {
                    $scope.groupinviteList.splice($index, 1);
                }, 400);
            }
        }
        // 添加团队与添加好友
        $scope.addTeam = function () {
            $state.go('tab.addTeam');
        };
        $scope.addFriend = function () {
            $state.go('tab.addFriend');
        };

        // === 融云消息监听 ===
        var newMsgCallBack = function (d, data) {
            /// console.log('conversation newMessage' + data);
            jsonMsg = JSON.parse(data);
            jsonMsg.unreadMessageCount = "1";
            var target;
            var groupMemberinfo = null;
            if (jsonMsg.conversationType == "PRIVATE") {
                // target = Friends.get(jsonMsg.targetId);
                var friends = $scope.friends;
                var friend_nums = friends.length;
                for (var i = 0; i < friend_nums; i++) {
                    if (friends[i].id == jsonMsg.targetId) {
                        target = friends[i];
                        break;
                    }
                }
            }
            else if (jsonMsg.conversationType == "GROUP") {
                // target = Groups.get(jsonMsg.targetId);
                var groups = $scope.groups;
                var groups_nums = groups.length;
                for (var i = 0; i < groups_nums; i++) {
                    if (groups[i].id == jsonMsg.targetId) {
                        target = groups[i];
                        groupMemberinfo = Groups.getGroupMember(jsonMsg.targetId, jsonMsg.senderUserId);
                        break;
                    }
                }
            }
            // console.log('target:' + JSON.stringify(target));
            jsonMsg = myUtil.resolveCon(jsonMsg, 1, target, groupMemberinfo);
            // console.log('jsonMsg after resolveCon:' + JSON.stringify(jsonMsg));
            var friends_message = $scope.friends_message;
            var friendLen = friends_message.length;
            for (var i = 0; i < friendLen; i++) {
                if (friends_message[i].targetId == jsonMsg.targetId) {
                    $scope.friends_message[i].unreadMessageCount = $scope.friends_message[i].unreadMessageCount + 1;
                    $scope.friends_message[i].latestMessage = jsonMsg.latestMessage;
                    return;
                }
            }
            // alert('NEW MEG push now');
            $scope.friends_message.push(jsonMsg);
        }
        newMessageEventService.listen(newMsgCallBack);
        // 清除所有会话
        $scope.clearConversition = function () {
            rongyunService.clearConversations().then(function () {
                $scope.$apply(function () {
                    $scope.friends_message = [];
                });
            });
        }
        // 将某人消息设为已读
        function clearSomeoneConversition(targetId, type) {
            rongyunService.clearMessagesUnreadStatus(targetId, type).then(function () { });
        }
        // 将某人消息删除
        function removeSomeoneConversition(targetId, type) {
            rongyunService.removeConversation(targetId, type).then(function () { });
        }

        // 是否已存在消息
        function findInFriends(val) {
            var friends_message = $scope.friends_message;
            var friendLen = friends_message.length;
            for (var i = 0; i < friendLen; i++) {
                if (friends_message[i].targetId == val) {
                    return i;
                }
            }
            return -1;
        }

        // 设为已读
        $scope.markMessage = function (index) {
            var message = $scope.friends_message[index];
            chatUnreadMessage.addUnreadMessage(-message.unreadMessageCount);
            message.unreadMessageCount = 0;
            clearSomeoneConversition(message.targetId, message.conversationType);
        };
        // 删除消息
        // TODO：需要清除消息状态，否则刷新后会再出来(待测)
        $scope.deleteMessage = function (index) {
            var message = $scope.friends_message[index];
            chatUnreadMessage.addUnreadMessage(-message.unreadMessageCount);
            $scope.friends_message.splice(index, 1);
            removeSomeoneConversition(message.targetId, message.conversationType);
        };

        $scope.gotoChatDetils = function (friend, $index) {
            // 清空未读消息
            $scope.friends_message[$index].unreadMessageCount = 0;
            var target;
            if (friend.conversationType == "PRIVATE") {
                var friends = $scope.friends;
                var friend_nums = friends.length;
                for (var i = 0; i < friend_nums; i++) {
                    if (friends[i].id == friend.targetId) {
                        target = friends[i];
                        break;
                    }
                }
            }
            else if (friend.conversationType == "GROUP") {
                var groups = $scope.groups;
                var groups_nums = groups.length;
                for (var i = 0; i < groups_nums; i++) {
                    if (groups[i].id == friend.targetId) {
                        target = groups[i];
                        break;
                    }
                }
            }
            // 转到聊天主界面
            var name = target ? target.name : '[陌生人]';
            $state.go("tab.chatDetail",
                { targetId: friend.targetId, name: name, conversationType: friend.conversationType }
            );
        }
        // 获取消息列表
        var getConversationList = function () {
            rongyunService.getConversationList().then(function (result) {
                var resultLen = result.length;
                var target;
                var groupMemberinfo = null;
                for (var i = 0; i < resultLen; i++) {
                    if (result[i].conversationType == "PRIVATE") {
                        target = Friends.get(result[i].targetId);
                    }
                    else if (result[i].conversationType == "GROUP") {
                        target = Groups.get(result[i].targetId);
                        try {
                            groupMemberinfo = Groups.getGroupMember(result[i].targetId, result[i].senderUserId);
                        } catch (e) {
                            alert('groupMemberinfo err:' + JSON.stringify(e));
                            break;
                        }
                    }
                    result[i] = myUtil.resolveCon(result[i], 0, target, groupMemberinfo);
                }
                var messageLen = 0;
                for (var j = 0; j < resultLen; j++) {
                    var index = findInFriends(result[j].targetId);
                    if (index == -1) {
                        $scope.friends_message.push(result[j]);
                        messageLen += result[j].unreadMessageCount;
                    } else {
                        $scope.friends_message[index].unreadMessageCount = result[j].unreadMessageCount;
                        $scope.friends_message[index].latestMessage = result[j].latestMessage;
                        messageLen += result[j].unreadMessageCount;
                    }
                }
                chatUnreadMessage.setUnreadMessage(messageLen);
            });
        }
        // 融云初始化
        var init = function () {
            $scope.friends_message = [];
            // TODO:立即加载在信息联系人未加载完成的情况下失效
            // getConversationList();
            $interval(function () {
                getConversationList();
            }, 3000);
        }
        //init();
        // init test
        initTest();
        function initTest() {
            $scope.friends_message = [];
            var messageLen = 0;
            $interval(function () {
                var ms = unreadMessages.getUnreadList();
                ms = myUtil.resolveCon(ms, 0, null);
                var msLen = ms.length;
                messageLen = 0;
                for (var j = 0; j < msLen; j++) {
                    var index = findInFriends(ms[j].targetId);
                    if (index == -1) {
                        messageLen += ms[j].unreadMessageCount;
                        $scope.friends_message.push(ms[j]);
                    } else {
                        $scope.friends_message[index].unreadMessageCount = ms[j].unreadMessageCount;
                        messageLen += ms[j].unreadMessageCount;
                        $scope.friends_message[index].latestMessage = ms[j].latestMessage;
                    }
                }
                chatUnreadMessage.setUnreadMessage(messageLen);
            }, 10000);
        }
    })
angular.module('chat.controllers')
.controller('friendInfoCtrl', function ($scope, Friends, Blacklist, $state, $ionicLoading,
     $stateParams, $timeout, ResFriend, currentUser) {
        $scope.Target = Friends.get($stateParams.targetId);
        var targetId = $stateParams.targetId;
        var targetName = $stateParams.targetName;
        $scope.isFriend = true;

        // 非好友
        if ($scope.Target == null) {
            $scope.isFriend = false;
            $scope.Target = { name: targetName, id: targetId };
        }

        $scope.settings = {
            inBlackList: false
        };
        var lists = Blacklist.all();
        if (!lists.length) {
            // 获取黑名单
            RongCloudLibPlugin.getBlacklist(
                function (ret, err) {
                    if (ret) {
                        console.log('getBlacklist:' + JSON.stringify(ret));
                        var userinfo;
                        for (var i = 0; i < ret.result.length; i++) {
                            userinfo = Friends.get(ret.result[i]);
                            lists.push({ id: ret.result[i], username: userinfo.username, portrait: userinfo.portrait });
                        }
                        Blacklist.set(lists);
                        console.log('Blacklist:' + JSON.stringify(Blacklist.all()));
                        console.log($stateParams.targetId);
                        console.log(JSON.stringify(Blacklist.get($stateParams.targetId)));
                        if (Blacklist.get($stateParams.targetId))
                            $scope.settings.inBlackList = true;
                    }
                    if (err) {
                        console.log('logout error:' + JSON.stringify(err));
                        alert('logout error:' + JSON.stringify(err));
                    }
                }
            );
        }
        else {
            if (Blacklist.get($stateParams.targetId))
                $scope.settings.inBlackList = true;
        }

        // 发送消息,跳转到聊天界面
        $scope.sendMsg = function () {
            //alert('p y is here ready to home:' + $stateParams.targetId + ":" + $stateParams.conversationType);
            $state.go('chat.chatDetail', {
                messageId: '1', name: targetName, targetId: targetId,
                conversationType: $stateParams.conversationType
            });
        }

        //////////////////////////////////////ws////////////////////////////////////////////////
        // 直接视频聊天
        $scope.vedioChat = function () {
            //alert('chatdetial:' + $stateParams.targetId);
            var obj = { isCalling: true, contactName: $stateParams.targetId };
            $state.go('call', obj);
        }

        // 添加陌生人为好友
        $scope.addFriend = function () {
            // 0 为发送好友请求
            var UserID = currentUser.getUserinfo().UserID;
            ResFriend(UserID, targetId, 0, function () {
                // 成功后删掉记录并刷新好友列表
                var showMsg = "您已发送好友请求!";
                $ionicLoading.show({
                    template: showMsg
                });
                $timeout(function () {
                    $ionicLoading.hide();
                }, 750);
            });
        }

        // 添加/移除黑名单
        $scope.chBlackList = function () {
            if ($scope.settings.inBlackList) {
                RongCloudLibPlugin.addToBlacklist({ userId: $stateParams.targetId },
                    function (ret, err) {
                        if (ret) {
                            alert('加入黑名单成功!');
                            var userinfo = Friends.get($stateParams.targetId);
                            Blacklist.addOne({ id: $stateParams.targetId, username: userinfo.username,
                                portrait: userinfo.portrait });
                        }
                        if (err) {
                            alert('addToBlacklist error:' + JSON.stringify(err));
                        }
                    }
                );
            }
            else {
                RongCloudLibPlugin.removeFromBlacklist({ userId: $stateParams.targetId },
                    function (ret, err) {
                        if (ret) {
                            Blacklist.removeOne($stateParams.targetId);
                            alert('移出黑名单成功!');
                        }
                        if (err) {
                            alert('removeFromBlacklist error:' + JSON.stringify(err));
                        }
                    }
                );
            }
        }
    })

angular.module('chat.controllers')
.controller('groupInfoCtrl', function ($scope, Groups, $state,
        $stateParams, CacheFactory, getGroupMembers, RequestUrl,currentUser) {
        $scope.Target = Groups.get($stateParams.targetId);
        var targetId = $stateParams.targetId;
        var targetName = $stateParams.targetName;
        var conversationType = $stateParams.conversationType;
        var groupType = $stateParams.groupType;
        
        // 发送群消息
        $scope.sendMsg = function () {
            // alert('p y is here ready to home:'+$stateParams.targetId+":"+$stateParams.conversationType);
            $state.go('chat.chatDetail', 
            { name: targetName, targetId: targetId, conversationType: conversationType });
        }
        // 添加群成员
        $scope.addTeammate = function () {
            $state.go('chat.addTeammate', 
            { GroupID: targetId });
        }
        $scope.members = [];
        function getGroupMem() {
            if (groupType == "create") {
                getGroupMembers(targetId.substr(4), callback);
            }
            function callback(data) {
                var data = data.data;
                var length = data.length;
                $scope.Target.number = length;
                for (var i = 0; i < length; i++) {
                    var obj = {};
                    var temdata = data[i];
                    obj.id = temdata.UserID;
                    obj.name = temdata.UserName;
                    obj.portrait = temdata.headimgurl ? RequestUrl + 'Images/Photo/' + temdata.headimgurl : null;
                    $scope.members.push(obj);
                }
            }
        }
        // 获取群组成员
        getGroupMem();
    });
/**
 * chat模块服务
*/

var chat_modules=['chat.route','chat.controllers','chat.services','chat.directive','chat.filter'];
chat_modules.concat(["chat.call"]);
; angular.module('chat', chat_modules)
  .config(function (SignalingProvider) {
    // 视频服务服务端配置
    SignalingProvider.setBackendUrl("http://115.29.51.196:5000/chat");
  })
  /**
   * 服务初始化
   * @param  {[Object]} $state [跳转服务]
   * @param  {[Object]} Signaling [socket.io实例]
   * @param  {[Object]} $ionicLoading [加载中弹层]
   * @param  {[Object]} $rootScope [全局scope]
   * @param  {[Object]} newMessageEventService [新消息事件服务]
   */
  .run(function ($state, Signaling, $ionicLoading, $rootScope, newMessageEventService) {
    /// ==== 全局监听消息(BEGIN) ====
    var chMsg = function (newValue, oldValue) {
      if (newValue !== oldValue) {
        var jsonMsg = newValue.pop();
        if (typeof jsonMsg !== "undefined" && jsonMsg !== "undefined") {
          newMessageEventService.broadcast(jsonMsg);
        }
      }
    };
    // watch items的变化
    var listener = $rootScope.$watch('arrMsgs', chMsg, true);
    // $scope.$on('$destroy', function () {
    //   console.log('destroy');
    //   listener();
    // });
    /// ==== 全局监听消息(END) ====

    Signaling.on('messageReceived', function (name, message, Signaling) {
      switch (message.type) {
        case 'call':
          if ($state.current.name === 'call') {
            Signaling.emit('sendMessage', name, { type: 'callInProgress' });
            return;
          }
          // alert('收到视频通话请求，准备跳转！' + message.type);
          $state.go('call', { isCalling: false, contactName: name });
          break;
      }
    });
  });
 

